name: üìÖ Scheduled Tasks

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      task_type:
        description: 'Type of scheduled task to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - dependencies
        - security
        - cleanup

jobs:
  update-dependencies:
    name: üîÑ Update Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.task_type == 'all' || github.event.inputs.task_type == 'dependencies'))
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pip-tools
      run: pip install pip-tools

    - name: Update requirements
      run: |
        pip-compile --upgrade requirements.in
        pip-compile --upgrade requirements-dev.in

    - name: Check for changes
      id: changes
      run: |
        if git diff --quiet requirements*.txt; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Create Pull Request
      if: steps.changes.outputs.changed == 'true'
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update dependencies"
        title: "chore: update dependencies"
        body: |
          This PR updates project dependencies to their latest versions.
          
          **Changes:**
          - Updated production dependencies
          - Updated development dependencies
          - Updated security patches
          
          **Generated by:** Scheduled workflow
          
          ‚ö†Ô∏è **Manual Review Required** - Please review and approve this update manually.
        branch: update-dependencies
        delete-branch: false
        labels: "dependencies,needs-review"

  security-audit:
    name: üîí Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.task_type == 'all' || github.event.inputs.task_type == 'security'))
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep

    - name: Install project dependencies
      run: |
        pip install -r requirements.txt

    - name: Run security audit
      run: |
        echo "Running safety check..."
        safety check --json --output safety-report.json || echo "Safety scan completed with warnings"
        
        echo "Running bandit security check..."
        bandit -r . -f json -o bandit-report.json || echo "Bandit scan completed with warnings"
        
        echo "Running semgrep security scan..."
        semgrep --config=auto --json --output=semgrep-report.json . || echo "Semgrep scan completed with warnings"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

    - name: Create security issue if vulnerabilities found
      if: always()
      run: |
        # Check if any security issues were found
        if [ -f safety-report.json ] && [ -s safety-report.json ]; then
          echo "Security vulnerabilities found, creating issue..."
          # This would create an issue, but we'll just log for now
          echo "Security audit completed - check reports for details"
        fi

  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.task_type == 'all' || github.event.inputs.task_type == 'cleanup'))
    steps:
    - uses: actions/checkout@v4

    - name: Clean up old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const cutoffDate = new Date();
          cutoffDate.setDate(cutoffDate.getDate() - 30); // 30 days ago
          
          for (const artifact of artifacts.data.artifacts) {
            const createdAt = new Date(artifact.created_at);
            if (createdAt < cutoffDate) {
              console.log(`Deleting old artifact: ${artifact.name} (created: ${artifact.created_at})`);
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
            }
          }

    - name: Clean up old workflow runs
      uses: actions/github-script@v7
      with:
        script: |
          const workflows = await github.rest.actions.listWorkflowRunsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const cutoffDate = new Date();
          cutoffDate.setDate(cutoffDate.getDate() - 30); // 30 days ago
          
          for (const run of workflows.data.workflow_runs) {
            const createdAt = new Date(run.created_at);
            if (createdAt < cutoffDate && run.status === 'completed') {
              console.log(`Deleting old workflow run: ${run.id} (created: ${run.created_at})`);
              await github.rest.actions.deleteWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: run.id
              });
            }
          }

  health-check:
    name: üè• Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.task_type == 'all')
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev]"

    - name: Run health checks
      run: |
        echo "Running basic health checks..."
        
        # Test CLI help
        python docforge.py --help
        
        # Test list commands
        python docforge.py list-docs
        python docforge.py list-projects
        
        # Test configuration
        python backend/app/core/simple_config.py check
        
        echo "Health checks completed successfully!"

    - name: Check package installation
      run: |
        echo "Testing package installation..."
        pip install .
        docforge-ai --help
        docforge-ai list-docs
        echo "Package installation test passed!"
