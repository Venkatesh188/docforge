name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - quick
        - security-only

env:
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  # Quick validation for PRs
  quick-check:
    name: ⚡ Quick Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ${{ env.PIP_CACHE_DIR }}
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev]"

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: black --check .

    - name: Type check with mypy
      run: mypy docforge.py backend/app --ignore-missing-imports
      continue-on-error: true

  # Comprehensive testing
  test:
    name: 🧪 Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix for non-ubuntu platforms
          - os: windows-latest
            python-version: '3.10'
          - os: macos-latest
            python-version: '3.10'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ${{ env.PIP_CACHE_DIR }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev]"

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: black --check .

    - name: Type check with mypy
      run: mypy docforge.py backend/app --ignore-missing-imports
      continue-on-error: true

    - name: Test CLI initialization
      run: |
        python docforge.py init
        ls -la .env || echo ".env not created"
      continue-on-error: true

    - name: Test CLI help commands
      run: |
        python docforge.py --help
        python docforge.py list-docs
        python docforge.py list-projects

    - name: Test configuration validation
      run: |
        python backend/app/core/simple_config.py check
      continue-on-error: true

    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=docforge --cov=backend --cov-report=xml --cov-report=html
      continue-on-error: true

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Security scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep

    - name: Install project dependencies
      run: |
        pip install -r requirements.txt

    - name: Safety check
      run: |
        safety check --json --output safety-report.json || echo "Safety scan completed with warnings"
        safety check --short-report

    - name: Bandit security check
      run: |
        bandit -r . -f json -o bandit-report.json || echo "Bandit scan completed with warnings"
        bandit -r . -ll

    - name: Semgrep security scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || echo "Semgrep scan completed with warnings"
        semgrep --config=auto .

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

  # Package validation and building
  package:
    name: 📦 Package Test
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine check-manifest

    - name: Check manifest
      run: check-manifest
      continue-on-error: true

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Test package installation
      run: |
        pip install dist/*.whl
        docforge-ai --help
        docforge-ai list-docs

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/

  # Docker containerization
  docker:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create optimized Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.11-slim as builder

        # Install build dependencies
        RUN apt-get update && apt-get install -y \
            build-essential \
            && rm -rf /var/lib/apt/lists/*

        WORKDIR /app

        # Copy requirements and install dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir --user -r requirements.txt

        # Production stage
        FROM python:3.11-slim

        # Install runtime dependencies
        RUN apt-get update && apt-get install -y \
            && rm -rf /var/lib/apt/lists/*

        # Copy Python packages from builder
        COPY --from=builder /root/.local /root/.local

        # Create non-root user
        RUN useradd --create-home --shell /bin/bash docforge

        WORKDIR /app
        USER docforge

        # Copy application code
        COPY --chown=docforge:docforge . .

        # Set environment
        ENV PYTHONPATH=/app
        ENV PATH=/root/.local/bin:$PATH
        ENV DOCFORGE_CLI_MODE=true

        # Health check
        HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
            CMD python docforge.py --help || exit 1

        # Default command
        CMD ["python", "docforge.py", "--help"]
        EOF

    - name: Build Docker image
      run: |
        docker build -t docforge-ai:latest .
        docker build -t docforge-ai:test --target builder .

    - name: Test Docker image
      run: |
        docker run --rm docforge-ai:latest python docforge.py --help
        docker run --rm docforge-ai:latest python docforge.py list-docs
        docker run --rm docforge-ai:latest python docforge.py list-projects

    - name: Test Docker image size
      run: |
        docker images docforge-ai:latest --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"

  # Performance testing
  performance:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev]"
        pip install pytest-benchmark memory-profiler

    - name: Run performance tests
      run: |
        pytest tests/ -v --benchmark-only --benchmark-save=performance
      continue-on-error: true

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: .benchmarks/

  # Publish to PyPI
  publish:
    name: 🚀 Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, security, package, docker]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/p/docforge-ai

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Notify successful publication
      run: |
        echo "✅ Successfully published docforge-ai to PyPI"
        echo "Package URL: https://pypi.org/project/docforge-ai/"

    - name: Verify PyPI publication
      run: |
        pip install docforge-ai
        docforge-ai --version

  # Create GitHub release
  create-release:
    name: 📝 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, security, package]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed" >> $GITHUB_OUTPUT
        git log --pretty=format:"* %s" $(git describe --tags --abbrev=0)..HEAD >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "## Installation" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "\`\`\`bash" >> $GITHUB_OUTPUT
        echo "pip install docforge-ai" >> $GITHUB_OUTPUT
        echo "# or using uv (faster)" >> $GITHUB_OUTPUT
        echo "uv pip install docforge-ai" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "## Quick Start" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "\`\`\`bash" >> $GITHUB_OUTPUT
        echo "# Initialize DocForge-ai" >> $GITHUB_OUTPUT
        echo "docforge-ai init" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "# Generate your first documentation" >> $GITHUB_OUTPUT
        echo "docforge-ai generate \"Your project idea here\"" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Get version
      id: version
      run: |
        VERSION=$(python -c "import sys; sys.path.insert(0, 'backend'); from app.core.simple_config import SimpleSettings; print(SimpleSettings().app_version)")
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: DocForge-ai v${{ steps.version.outputs.version }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: false

  # Dependency updates
  update-dependencies:
    name: 🔄 Update Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install pip-tools
      run: pip install pip-tools

    - name: Update requirements
      run: |
        pip-compile --upgrade requirements.in
        pip-compile --upgrade requirements-dev.in

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update dependencies"
        title: "chore: update dependencies"
        body: |
          This PR updates project dependencies to their latest versions.
          
          **Changes:**
          - Updated production dependencies
          - Updated development dependencies
          - Updated security patches
        branch: update-dependencies
        delete-branch: true